apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: sast-coverity-check
spec:
  description: >-
    This task performs needed checks in order to use Coverity image in the pipeline. It will check for a Coverity license secret and an authentication secret for pulling the image.
  results:
    - description: Tekton task result output.
      name: TASK_OUTPUT
  params:
    - description: Image URL.
      name: image-url
      type: string
      # In a future 0.2 version of the task, drop the default to make this required
      default: ""
    - description: Image digest to report findings for.
      name: image-digest
      type: string
      # In a future 0.2 version of the task, drop the default to make this required
      default: ""
    - name: COV_LICENSE
      description: Name of secret which contains the Coverity license
      default: cov-license
    - name: AUTH_TOKEN_COVERITY_IMAGE
      description: Name of secret which contains the authentication token for pulling the Coverity image.
      default: "auth-token-coverity-image"
  volumes:
    - name: cov-license
      secret:
        secretName: $(params.COV_LICENSE)
        optional: false
    - name: auth-token-coverity-image
      secret:
        secretName: $(params.AUTH_TOKEN_COVERITY_IMAGE)
        optional: false
  steps:
    - name: coverity-availability-check
      image: quay.io/redhat-appstudio/konflux-test:v1.4.7@sha256:cf6808a3bd605630a5d9f20595ff7c43f8645c00381219d32f5a11e88fe37072
      onError: stopAndFail
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      volumeMounts:
        - name: cov-license
          mountPath: "/etc/secrets/cov"
          readOnly: true
        - name: auth-token-coverity-image
          mountPath: "/etc/secrets/auth/config.json"
          subPath: .dockerconfigjson
      env:
        - name: COV_LICENSE
          value: $(params.COV_LICENSE)
        - name: AUTH_TOKEN_COVERITY_IMAGE
          value: $(params.AUTH_TOKEN_COVERITY_IMAGE)
      script: |
        #!/usr/bin/env bash
        set -eo pipefail
        
        # Checking Coverity license
        COV_LICENSE_PATH=/etc/secrets/cov/cov-license
        if [ -f "${COV_LICENSE_PATH}" ] && [ -s "${COV_LICENSE_PATH}" ]; then
          echo "Coverity license detected!"
        else
          echo "No license file for Coverity was detected. Coverity scan won't be executed..."
          echo "Please, create a secret called "cov-license" with a key called "cov-license" and the value containing the Coverity license."
          exit 0
        fi
        
        # Checking authentication token for downloading coverity image
        AUTH_TOKEN_COVERITY_IMAGE_PATH=/etc/secrets/auth/config.json
        if [ -f "${AUTH_TOKEN_COVERITY_IMAGE_PATH}" ] && [ -s "${AUTH_TOKEN_COVERITY_IMAGE_PATH}" ]; then
          echo "Authentication token detected!"
        else
          echo "No authentication token for downloading Coverity image detected. Coverity scan won't be executed..."
          echo "Please, create an imagePullSecret named "auth-token-coverity-image" with the authentication token for pulling the Coverity image."
          exit 0
        fi
        
        echo -n "success" | tee "$(results.TASK_OUTPUT.path)"

  workspaces:
  - name: workspace
